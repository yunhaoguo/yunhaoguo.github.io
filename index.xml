<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yunhao Blog</title>
    <link>https://yunhaoguo.github.io/</link>
    <description>Recent content on Yunhao Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yunhaoguo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flutter-Http</title>
      <link>https://yunhaoguo.github.io/post/flutter-http/</link>
      <pubDate>Thu, 18 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yunhaoguo.github.io/post/flutter-http/</guid>
      <description>Usage Add Dependency Under dependencies in pubspec.yaml, add the following codes:
 http: ^latest_version  Request Example First, define a class model to hold the data received from internet:
class CommonModel { final String icon; final String title; final String url; final String statusBarColor; final bool hideAppBar; CommonModel({this.icon, this.title, this.url, this.statusBarColor, this.hideAppBar}); factory CommonModel.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) { return CommonModel( icon: json[&#39;icon&#39;], title: json[&#39;title&#39;], url: json[&#39;url&#39;], statusBarColor: json[&#39;statusBarColor&#39;], hideAppBar: json[&#39;hideAppBar&#39;], ); } }  Then, define a asynchronous method to send a request:</description>
    </item>
    
    <item>
      <title>Flutter-Navigator</title>
      <link>https://yunhaoguo.github.io/post/flutter-navigator/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yunhaoguo.github.io/post/flutter-navigator/</guid>
      <description>Introduction Most apps contain several screens for displaying different types of information. For example, an app might have a screen that displays products. Users can then tap the image of a product to get more detailed information on a new screen.
Terminology: In Flutter, screens and pages are called routes.
In Android, a route is equivalent to an Activity. In iOS, a route is equivalent to a ViewController. In Flutter, a route is just a widget.</description>
    </item>
    
    <item>
      <title>Kotlin-Lambda</title>
      <link>https://yunhaoguo.github.io/post/lambdainkotlin/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yunhaoguo.github.io/post/lambdainkotlin/</guid>
      <description>Introduction “Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。 Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。
Usage in Kotlin 1 Example val lambda = {arg1: Int -&amp;gt; arg1 + 1} println(lambda(2)) //等同于调用 println(lambda.invoke(2))  以上代码实现了给参数加一并返回的效果，其中lambda表达式最后一行的值是返回值，比如下面计算两个数的和的表达式中arg1 + arg2就是返回值
val sumLambda = {arg1: Int, arg2: Int -&amp;gt; { println(&amp;quot;$arg1 + $arg2 = ${arg1 + arg2}&amp;quot;) arg1 + arg2 } } println(sumLambda(1, 2))  2 Type 在Kotlin里，每个方法都有一种类型，分别为Function0 - Function22，即最多可包含22个参数。我们使用println(&amp;lt;funcName&amp;gt;)即可得到。如下为Function2的interface：
	/** A function that takes 2 arguments. */ public interface Function2&amp;lt;in P1, in P2, out R&amp;gt; : Function&amp;lt;R&amp;gt; { /** Invokes the function with the specified arguments.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://yunhaoguo.github.io/about/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yunhaoguo.github.io/about/</guid>
      <description>Name: Yunhao Guo Nick Name: Big Brother Guo Birth Date: 1994-09 Job Title: Android Developer Email: yunhaoguo@foxmail.com Github: https://github.com/yunhaoguo LinkedIn: https://www.linkedin.com/in/yunhao-guo-80b1b6144</description>
    </item>
    
    <item>
      <title>First day</title>
      <link>https://yunhaoguo.github.io/post/guoyunhao/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yunhaoguo.github.io/post/guoyunhao/</guid>
      <description>This is my first day using blog.
Hope I can make good a use of it.</description>
    </item>
    
  </channel>
</rss>